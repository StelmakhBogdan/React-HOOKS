import React, {useContext, useEffect, useState} from 'react';
import {Redirect} from 'react-router-dom';

import useFetch from 'hooks/use-fetch';
import useLocalStorage from 'hooks/use-localStorage';
import {CurrentUserContext} from 'contexts/current-user';
import BackendErrorMessages from 'components/backend-error-messages';

const Settings = () => {
    const [currentUserState, dispatch] = useContext(CurrentUserContext);
    const apiUrl = '/user';
    const [{response, error}, doFetch] = useFetch(apiUrl);
    const [image, setImage] = useState('');
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [bio, setBio] = useState('');
    const [, setToken] = useLocalStorage('token');
    const [isSuccessfulLogout, setIsSuccessfulLogout] = useState(false);

    const handleSubmit = event => {
        event.preventDefault();
        doFetch({
            method: 'put',
            data: {
                user: {
                    ...currentUserState.currentUser,
                    image,
                    username,
                    bio,
                    email,
                    password
                }
            }
        });
    };

    const logout = event => {
        event.preventDefault();
        setToken('');
        dispatch({type: 'LOGOUT'});
        setIsSuccessfulLogout(true);
    };

    useEffect(() => {
        if (!currentUserState.currentUser) {
            return
        }

        setImage(currentUserState.currentUser.image);
        setUsername(currentUserState.currentUser.username);
        setEmail(currentUserState.currentUser.email);
        setBio(currentUserState.currentUser.bio);
    }, [currentUserState.currentUser]);

    useEffect(() => {
        if (!response) {
            return
        }

        dispatch({
            type: 'UPDATE_USER_DATA', payload: response.user
        })
    }, [response, dispatch]);

    if (isSuccessfulLogout) {
        return <Redirect to="/"/>
    }

    return (
        <div className="settings-page">
            <div className="container page">
                <div className="row">
                    <div className="col-md-6 offset-md-3 col-xs-12">
                        <h1 className="text-xs-center">Your settings</h1>
                        {error && <BackendErrorMessages backendErrors={error.errors} />}
                        <form onSubmit={handleSubmit}>
                            <fieldset>
                                <fieldset className="form-group">
                                    <input
                                        type="text"
                                        className="form-control form-control-lg"
                                        placeholder="URL of profile picture"
                                        value={image}
                                        onChange={e => setImage(e.target.value)}/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input
                                        type="text"
                                        className="form-control form-control-lg"
                                        placeholder="Username"
                                        value={username}
                                        onChange={e => setUsername(e.target.value)}/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <textarea
                                        className="form-control form-control-lg"
                                        rows="8"
                                        placeholder="Short bio"
                                        value={bio}
                                        onChange={e => setBio(e.target.value)}/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input
                                        type="text"
                                        className="form-control form-control-lg"
                                        placeholder="Email"
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input
                                        type="password"
                                        className="form-control form-control-lg"
                                        placeholder="Password"
                                        value={password}
                                        onChange={e => setPassword(e.target.value)}/>
                                </fieldset>
                                <button
                                    className="btn btn-lg btn-primary pull-xs-right"
                                    type="submit"
                                >
                                    Update settings
                                </button>
                            </fieldset>
                        </form>
                        <hr/>
                        <button
                            className="btn btn-outline-danger"
                            onClick={logout}>Click here to logout</button>
                    </div>
                </div>
            </div>
        </div>
    )
};

export default Settings;