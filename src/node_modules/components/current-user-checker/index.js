import {useContext, useEffect} from 'react';

import useFetch from 'hooks/use-fetch';
import {CurrentUserContext} from 'contexts/current-user';
import useLocalStorage from 'hooks/use-localStorage';

const CurrentUserChecker = ({children}) => {
    const [{response}, doFetch] = useFetch('/user');
    const [, dispatch] = useContext(CurrentUserContext); // setCurrentUserState change on dispatch
    const [token] = useLocalStorage('token');

    useEffect(() => {
        if (!token) {
            dispatch({type: 'SET_UNAUTHORIZED'});
            // setCurrentUserState(state => ({
            //     ...state,
            //     isLoggedIn: false
            // }));
            return
        }

        doFetch();
        dispatch({type: 'LOADING'});
        // setCurrentUserState(state => ({
        //     ...state,
        //     isLoading: true
        // }));
    }, [doFetch, dispatch, token]); // setCurrentUserState change on dispatch

    useEffect(() => {
        if (!response) {
            return
        }

        // setCurrentUserState(state => ({
        //     ...state,
        //     isLoggedIn: true,
        //     isLoading: false,
        //     currentUser: response.user
        // }))
        dispatch({type: 'SET_AUTHORIZED', payload: response.user});
    }, [response, dispatch]);
    return children;
};

export default CurrentUserChecker;